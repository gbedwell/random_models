dplyr::mutate(corr.sd = expected.sd*max)
spread.range <- range.analysis %>%
dplyr::filter(range.frac >= 0) %>%
dplyr::filter(gene.length > 1000) %>%
dplyr::mutate(ratio = range.frac/expected.sd) %>%
dplyr::group_by(gene.name, total.sites) %>%
dplyr::mutate(max = max(ratio)) %>%
dplyr::distinct(gene.name, .keep_all=TRUE) %>%
dplyr::ungroup() %>%
dplyr::arrange(gene.length, total.sites) %>%
dplyr::mutate(corr.sd = expected.sd*max)
plot(spread.range$gene.length, spread.range$ratio)
spread.pfits <- spread.range %>%
dplyr::group_by(total.sites) %>%
tidyr::nest() %>%
dplyr::mutate(fit.corr.sd =
purrr::map(data,
~nlsLM(corr.sd ~ N*gene.length^a,
data = .,
start = list(N = min(spread.range$corr.sd),
a = unname(coef(lm(log(corr.sd) ~ log(gene.length),
data=spread.range))[2])),
control = list(maxiter = 1000))),
tidied = map(fit.corr.sd, tidy)) %>%
tidyr::unnest(tidied, .drop = TRUE) %>%
dplyr::select(c(total.sites, term, estimate)) %>%
tidyr::spread(term, estimate)
spread.pfits <- spread.range %>%
dplyr::group_by(total.sites) %>%
tidyr::nest() %>%
dplyr::mutate(fit.corr.sd =
purrr::map(data,
~nlsLM(corr.sd ~ N*gene.length^a,
data = .,
start = list(N = min(spread.range$corr.sd),
a = unname(coef(lm(log(corr.sd) ~ log(gene.length),
data=spread.range))[2])),
control = list(maxiter = 1000))),
tidied = map(fit.corr.sd, tidy)) %>%
tidyr::unnest(tidied, .drop = TRUE) %>%
dplyr::select(c(total.sites, term, estimate)) %>%
tidyr::spread(term, estimate)
colnames(spread.pfits) <- c("total.sites","a.spread","N.spread")
spread.pfit.df <- dplyr::full_join(spread.range, spread.pfits, by=c("total.sites")) %>%
dplyr::select(total.sites, gene.name, gene.length, corr.sd, N.spread, a.spread) %>%
dplyr::mutate(predicted.value = N.spread*gene.length^a.spread,
residual.value = corr.sd - predicted.value) %>%
dplyr::group_by(total.sites) %>%
dplyr::add_count(total.sites, name = "number")
spread.pfit.plot <- ggplot(spread.pfit.df) +
geom_point(aes(x=gene.length/1E6, y=corr.sd, fill="black"), alpha=0.4) +
geom_line(aes(x=gene.length/1E6, y=predicted.value), color="red", size=0.4) +
facet_wrap(~ total.sites, labeller = labeller(.multi_line = FALSE)) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(breaks = c(0,1,2)) +
labs(x = "Gene Length (Mbp)", y = "Upper Spread")
spread.N.fit.temp <- summary(nlsLM(N.spread ~ (N*total.sites^a) + k,
data = spread.pfits,
start = list(N = max(spread.pfits$N.spread),
a = unname(coef(lm(log(N.spread) ~ log(total.sites), data=spread.pfits))[2]),
k = 0),
control = list(maxiter = 500)))
spread.N.fit.params
spread.a.fit.temp <- nlsLM(log(a.spread) ~ b0+b1*(log(total.sites)-c)*H(c-log(total.sites))+b2*(log(total.sites)-c),
data=spread.pfits,
start = list(b0 = 0,
b1 = 0.1,
b2 = 0.1,
c = 10),
control = list(maxiter = 500))
spread.a.fit.params <- summary(spread.a.fit.temp)$coefficients
rm(spread.a.fit.temp)
spread.a.pred <- spread.pfits %>%
dplyr::select(-c(N.spread)) %>%
dplyr::mutate(spread.a.pred = case_when(total.sites <
exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[2,1])*
total.sites^spread.a.fit.params[2,1],
total.sites >= exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[3,1])*
total.sites^spread.a.fit.params[3,1]))
spread.a.fit.params
spread.range <- range.analysis %>%
dplyr::filter(range.frac >= 0) %>%
dplyr::filter(gene.length > 1000) %>%
dplyr::mutate(ratio = range.frac/expected.sd) %>%
dplyr::group_by(gene.name, total.sites) %>%
dplyr::mutate(max = max(ratio)) %>%
dplyr::distinct(gene.name, .keep_all=TRUE) %>%
dplyr::ungroup() %>%
dplyr::arrange(gene.length, total.sites) %>%
dplyr::mutate(corr.sd = expected.sd*max)
spread.pfits <- spread.range %>%
dplyr::group_by(total.sites) %>%
tidyr::nest() %>%
dplyr::mutate(fit.corr.sd =
purrr::map(data,
~nlsLM(corr.sd ~ N*gene.length^a,
data = .,
start = list(N = min(spread.range$corr.sd),
a = unname(coef(lm(log(corr.sd) ~ log(gene.length),
data=spread.range))[2])),
control = list(maxiter = 1000))),
tidied = map(fit.corr.sd, tidy)) %>%
tidyr::unnest(tidied, .drop = TRUE) %>%
dplyr::select(c(total.sites, term, estimate)) %>%
tidyr::spread(term, estimate)
colnames(spread.pfits) <- c("total.sites","a.spread","N.spread")
spread.pfit.df <- dplyr::full_join(spread.range, spread.pfits, by=c("total.sites")) %>%
dplyr::select(total.sites, gene.name, gene.length, corr.sd, N.spread, a.spread) %>%
dplyr::mutate(predicted.value = N.spread*gene.length^a.spread,
residual.value = corr.sd - predicted.value) %>%
dplyr::group_by(total.sites) %>%
dplyr::add_count(total.sites, name = "number")
spread.pfit.plot <- ggplot(spread.pfit.df) +
geom_point(aes(x=gene.length/1E6, y=corr.sd, fill="black"), alpha=0.4) +
geom_line(aes(x=gene.length/1E6, y=predicted.value), color="red", size=0.4) +
facet_wrap(~ total.sites, labeller = labeller(.multi_line = FALSE)) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(breaks = c(0,1,2)) +
labs(x = "Gene Length (Mbp)", y = "Upper Spread")
#spread.pfit.plot
spread.N.fit.temp <- summary(nlsLM(N.spread ~ (N*total.sites^a) + k,
data = spread.pfits,
start = list(N = max(spread.pfits$N.spread),
a = unname(coef(lm(log(N.spread) ~ log(total.sites), data=spread.pfits))[2]),
k = 0),
control = list(maxiter = 500)))
spread.N.fit.params <- spread.N.fit.temp$coefficients
rm(spread.N.fit.temp)
spread.N.fit.plot <- ggplot(spread.pfits) +
geom_point(aes(x=total.sites, y=N.spread), color="black", size=2.5, shape=21) +
geom_point(aes(x=total.sites, y=N.spread, fill="black"), size=2.5, alpha=0.4) +
geom_line(aes(x=total.sites,
y=(spread.N.fit.params[1,1]*total.sites^spread.N.fit.params[2,1]) + spread.N.fit.params[3,1]),
color = "red", size=0.4) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(labels = comma) +
labs(x = "Total Sites", y = "Spread N parameter")
#spread.N.fit.plot
spread.a.fit.temp <- nlsLM(log(a.spread) ~ b0+b1*(log(total.sites)-c)*H(c-log(total.sites))+b2*(log(total.sites)-c),
data=spread.pfits,
start = list(b0 = 0,
b1 = 0.1,
b2 = 0.1,
c = 10),
control = list(maxiter = 500))
spread.a.fit.params <- summary(spread.a.fit.temp)$coefficients
rm(spread.a.fit.temp)
spread.a.pred <- spread.pfits %>%
dplyr::select(-c(N.spread)) %>%
dplyr::mutate(spread.a.pred = case_when(total.sites <
exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[2,1])*
total.sites^spread.a.fit.params[2,1],
total.sites >= exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[3,1])*
total.sites^spread.a.fit.params[3,1]))
spread.a.fit.plot <- ggplot(spread.pfits) +
geom_point(aes(x=total.sites, y=a.spread), color="black", size=2.5, shape=21) +
geom_point(aes(x=total.sites, y=a.spread, fill="black"), size=2.5, alpha=0.4) +
geom_line(data=spread.a.pred,
aes(x=total.sites,
y=(spread.a.pred)),
color = "red", size=0.4) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(labels = comma) +
labs(x = "Total Sites", y = "Spread a parameter")
#spread.a.fit.plot
spread.a.fit.params
spread.range <- range.analysis %>%
dplyr::filter(range.frac >= 0) %>%
dplyr::filter(gene.length > 5000) %>%
dplyr::mutate(ratio = range.frac/expected.sd) %>%
dplyr::group_by(gene.name, total.sites) %>%
dplyr::mutate(max = max(ratio)) %>%
dplyr::distinct(gene.name, .keep_all=TRUE) %>%
dplyr::ungroup() %>%
dplyr::arrange(gene.length, total.sites) %>%
dplyr::mutate(corr.sd = expected.sd*max)
spread.pfits <- spread.range %>%
dplyr::group_by(total.sites) %>%
tidyr::nest() %>%
dplyr::mutate(fit.corr.sd =
purrr::map(data,
~nlsLM(corr.sd ~ N*gene.length^a,
data = .,
start = list(N = min(spread.range$corr.sd),
a = unname(coef(lm(log(corr.sd) ~ log(gene.length),
data=spread.range))[2])),
control = list(maxiter = 1000))),
tidied = map(fit.corr.sd, tidy)) %>%
tidyr::unnest(tidied, .drop = TRUE) %>%
dplyr::select(c(total.sites, term, estimate)) %>%
tidyr::spread(term, estimate)
colnames(spread.pfits) <- c("total.sites","a.spread","N.spread")
spread.pfit.df <- dplyr::full_join(spread.range, spread.pfits, by=c("total.sites")) %>%
dplyr::select(total.sites, gene.name, gene.length, corr.sd, N.spread, a.spread) %>%
dplyr::mutate(predicted.value = N.spread*gene.length^a.spread,
residual.value = corr.sd - predicted.value) %>%
dplyr::group_by(total.sites) %>%
dplyr::add_count(total.sites, name = "number")
spread.pfit.plot <- ggplot(spread.pfit.df) +
geom_point(aes(x=gene.length/1E6, y=corr.sd, fill="black"), alpha=0.4) +
geom_line(aes(x=gene.length/1E6, y=predicted.value), color="red", size=0.4) +
facet_wrap(~ total.sites, labeller = labeller(.multi_line = FALSE)) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(breaks = c(0,1,2)) +
labs(x = "Gene Length (Mbp)", y = "Upper Spread")
#spread.pfit.plot
spread.N.fit.temp <- summary(nlsLM(N.spread ~ (N*total.sites^a) + k,
data = spread.pfits,
start = list(N = max(spread.pfits$N.spread),
a = unname(coef(lm(log(N.spread) ~ log(total.sites), data=spread.pfits))[2]),
k = 0),
control = list(maxiter = 500)))
spread.N.fit.params <- spread.N.fit.temp$coefficients
rm(spread.N.fit.temp)
spread.N.fit.plot <- ggplot(spread.pfits) +
geom_point(aes(x=total.sites, y=N.spread), color="black", size=2.5, shape=21) +
geom_point(aes(x=total.sites, y=N.spread, fill="black"), size=2.5, alpha=0.4) +
geom_line(aes(x=total.sites,
y=(spread.N.fit.params[1,1]*total.sites^spread.N.fit.params[2,1]) + spread.N.fit.params[3,1]),
color = "red", size=0.4) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(labels = comma) +
labs(x = "Total Sites", y = "Spread N parameter")
#spread.N.fit.plot
spread.a.fit.temp <- nlsLM(log(a.spread) ~ b0+b1*(log(total.sites)-c)*H(c-log(total.sites))+b2*(log(total.sites)-c),
data=spread.pfits,
start = list(b0 = 0,
b1 = 0.1,
b2 = 0.1,
c = 10),
control = list(maxiter = 500))
spread.a.fit.params <- summary(spread.a.fit.temp)$coefficients
rm(spread.a.fit.temp)
spread.a.pred <- spread.pfits %>%
dplyr::select(-c(N.spread)) %>%
dplyr::mutate(spread.a.pred = case_when(total.sites <
exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[2,1])*
total.sites^spread.a.fit.params[2,1],
total.sites >= exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[3,1])*
total.sites^spread.a.fit.params[3,1]))
spread.a.fit.plot <- ggplot(spread.pfits) +
geom_point(aes(x=total.sites, y=a.spread), color="black", size=2.5, shape=21) +
geom_point(aes(x=total.sites, y=a.spread, fill="black"), size=2.5, alpha=0.4) +
geom_line(data=spread.a.pred,
aes(x=total.sites,
y=(spread.a.pred)),
color = "red", size=0.4) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(labels = comma) +
labs(x = "Total Sites", y = "Spread a parameter")
#spread.a.fit.plot
spread.a.fit.plot
spread.range <- range.analysis %>%
dplyr::filter(range.frac >= 0) %>%
dplyr::mutate(ratio = range.frac/expected.sd) %>%
dplyr::group_by(gene.name, total.sites) %>%
dplyr::mutate(max = max(ratio)) %>%
dplyr::distinct(gene.name, .keep_all=TRUE) %>%
dplyr::ungroup() %>%
dplyr::arrange(gene.length, total.sites) %>%
dplyr::mutate(corr.sd = expected.sd*max)
spread.pfits <- spread.range %>%
dplyr::group_by(total.sites) %>%
tidyr::nest() %>%
dplyr::mutate(fit.corr.sd =
purrr::map(data,
~nlsLM(corr.sd ~ N*gene.length^a,
data = .,
start = list(N = min(spread.range$corr.sd),
a = unname(coef(lm(log(corr.sd) ~ log(gene.length),
data=spread.range))[2])),
control = list(maxiter = 1000))),
tidied = map(fit.corr.sd, tidy)) %>%
tidyr::unnest(tidied, .drop = TRUE) %>%
dplyr::select(c(total.sites, term, estimate)) %>%
tidyr::spread(term, estimate)
colnames(spread.pfits) <- c("total.sites","a.spread","N.spread")
spread.pfit.df <- dplyr::full_join(spread.range, spread.pfits, by=c("total.sites")) %>%
dplyr::select(total.sites, gene.name, gene.length, corr.sd, N.spread, a.spread) %>%
dplyr::mutate(predicted.value = N.spread*gene.length^a.spread,
residual.value = corr.sd - predicted.value) %>%
dplyr::group_by(total.sites) %>%
dplyr::add_count(total.sites, name = "number")
spread.pfit.plot <- ggplot(spread.pfit.df) +
geom_point(aes(x=gene.length/1E6, y=corr.sd, fill="black"), alpha=0.4) +
geom_line(aes(x=gene.length/1E6, y=predicted.value), color="red", size=0.4) +
facet_wrap(~ total.sites, labeller = labeller(.multi_line = FALSE)) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(breaks = c(0,1,2)) +
labs(x = "Gene Length (Mbp)", y = "Upper Spread")
#spread.pfit.plot
spread.N.fit.temp <- summary(nlsLM(N.spread ~ (N*total.sites^a) + k,
data = spread.pfits,
start = list(N = max(spread.pfits$N.spread),
a = unname(coef(lm(log(N.spread) ~ log(total.sites), data=spread.pfits))[2]),
k = 0),
control = list(maxiter = 500)))
spread.N.fit.params <- spread.N.fit.temp$coefficients
rm(spread.N.fit.temp)
spread.N.fit.plot <- ggplot(spread.pfits) +
geom_point(aes(x=total.sites, y=N.spread), color="black", size=2.5, shape=21) +
geom_point(aes(x=total.sites, y=N.spread, fill="black"), size=2.5, alpha=0.4) +
geom_line(aes(x=total.sites,
y=(spread.N.fit.params[1,1]*total.sites^spread.N.fit.params[2,1]) + spread.N.fit.params[3,1]),
color = "red", size=0.4) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(labels = comma) +
labs(x = "Total Sites", y = "Spread N parameter")
#spread.N.fit.plot
spread.a.fit.temp <- nlsLM(log(a.spread) ~ b0+b1*(log(total.sites)-c)*H(c-log(total.sites))+b2*(log(total.sites)-c),
data=spread.pfits,
start = list(b0 = 0,
b1 = 0.1,
b2 = 0.1,
c = 10),
control = list(maxiter = 500))
spread.a.fit.params <- summary(spread.a.fit.temp)$coefficients
rm(spread.a.fit.temp)
spread.a.pred <- spread.pfits %>%
dplyr::select(-c(N.spread)) %>%
dplyr::mutate(spread.a.pred = case_when(total.sites <
exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[2,1])*
total.sites^spread.a.fit.params[2,1],
total.sites >= exp(spread.a.fit.params[4,1]) ~
exp(spread.a.fit.params[1,1] -
spread.a.fit.params[4,1]*spread.a.fit.params[3,1])*
total.sites^spread.a.fit.params[3,1]))
spread.a.fit.plot <- ggplot(spread.pfits) +
geom_point(aes(x=total.sites, y=a.spread), color="black", size=2.5, shape=21) +
geom_point(aes(x=total.sites, y=a.spread, fill="black"), size=2.5, alpha=0.4) +
geom_line(data=spread.a.pred,
aes(x=total.sites,
y=(spread.a.pred)),
color = "red", size=0.4) +
theme_bw() +
theme(#panel.grid.major=element_blank(),
#panel.grid.minor=element_blank(),
text=element_text(size=10),
axis.text=element_text(size=10),
axis.title=element_text(size=12),
legend.position="none") +
scale_x_continuous(labels = comma) +
labs(x = "Total Sites", y = "Spread a parameter")
#spread.a.fit.plot
spread.uw.fits.plot
spread.uw.fits.plot
spread.pfit.resid.plot
spread.range %>%
dplyr::group_by(total.sites) %>%
tidyr::nest() %>%
dplyr::mutate(fit.corr.sd =
purrr::map(data,
~nlsLM(corr.sd ~ N*gene.length^a,
data = .,
start = list(N = min(spread.range$corr.sd),
a = unname(coef(lm(log(corr.sd) ~ log(gene.length),
data=spread.range))[2])),
control = list(maxiter = 1000))),
tidied = map(fit.corr.sd, tidy)) %>%
tidyr::unnest(tidied, .drop = TRUE)
x <- seq(10000,1000000,100)
plot(x, x^1)
plot(x, x^0.6)
plot(x, x^0.1)
plot(x, x^0.4)
plot(x, x^0.4)
abline(x,x^0.6, col="red")
abline(x^0.6, col="red")
plot(x, x^0.4)
abline(x^0.6, col="red")
plot(x, x^0.4)
abline(x, x^0.6, col="red")
plot(x, x^0.4)
lines(x,x^0.6, col="red")
plot(x, x^0.4)
lines(x,x^0.6)
plot(x, x^0.6)
exp(-21)
plot(x, 8E-10*x^0.6)
plot(x, 8E-10*x^0.4)
plot(x, 8E-10*x^0.4,ylim = c(0,10^-5))
lines(x,x^0.6)
plot(x, 8E-10*x^0.4,ylim = c(0,10^-6))
lines(x,x^0.6, col="red")
plot(x, 8E-10*x^0.4,ylim = c(0,10^-5))
lines(x,x^0.6, col="red")
plot(x, 8E-10*x^0.6)
plot(x, 8E-10*x^0.4)
plot(x, 8E-10*x^0.6)
0.04848595/0.00903631
0.04111835/0.01041641
0.23603086/0.15223415
0.22229664/0.13455766 0.023204156
0.22229664/0.13455766
(5.36568+3.947459)/2
(1.652055+1.550446)/2
spread.a.fit.params
0.19021112*4.656569
0.19021112*1.60125
0.01194416*4.656569
0.1287921/0.05561881
0.3266587/0.3045756
load("/Users/gbedwell/Documents/scripts/bioinformatics/int_sites/int_site_analysis/models/model_files/combined_plots.RData")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/scripts/bioinformatics/int_sites/int_site_analysis/models/")
legend <- get_legend(
zeroes.plot +
guides(fill = guide_legend(nrow = 1,
"Fragmentation Method",
title.position = "top",
title.hjust=0.5,
override.aes = list(size = 3))) +
theme(legend.position = "top",
legend.title=element_text(size=12),
legend.text=element_text(size=12)))
library(scales)
library(cowplot)
library(minpack.lm)
library(data.table)
library(broom)
library(tidyverse)
legend <- get_legend(
zeroes.plot +
guides(fill = guide_legend(nrow = 1,
"Fragmentation Method",
title.position = "top",
title.hjust=0.5,
override.aes = list(size = 3))) +
theme(legend.position = "top",
legend.title=element_text(size=12),
legend.text=element_text(size=12)))
row1 <- cowplot::plot_grid(uw.plot, zeroes.plot, mean.slope.fit.plot,
labels = c("A","B","C"),
label_size = 16,
ncol = 3)
row2 <- cowplot::plot_grid(mean.int.fit.plot, spread.N.plot, spread.a.fit.plot,
labels = c("D","E","F"),
label_size = 16,
ncol = 3)
global.fits <- plot_grid(legend, row1, row2,
ncol = 1,
rel_heights = c(0.2,1,1))
ggsave(filename=paste0(figure.directory, "global_fits_combo.tiff"), plot=global.fits, height=8,
width=14, units="in", device="tiff")
